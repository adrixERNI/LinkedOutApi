// <auto-generated />
using System;
using LinkedOutApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LinkedOutApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LinkedOutApi.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Batches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Backend & Cloud 2025",
                            Status = "In Progress"
                        });
                });

            modelBuilder.Entity("LinkedOutApi.Entities.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CVs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            File = "Pdf",
                            IsDeleted = false,
                            Name = "My Resume",
                            UserId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa4")
                        });
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Soft"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Self"
                        });
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CredentialURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Expiration")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("IssuingOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Image1",
                            Path = "Path/heyYou",
                            UserId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa4")
                        });
                });

            modelBuilder.Entity("LinkedOutApi.Entities.MentorAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BootcamperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OverallRating")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BootcamperId");

                    b.HasIndex("MentorId");

                    b.HasIndex("TopicId");

                    b.ToTable("MentorAssessments");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.MentorSkillFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MentorAssessmentId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorAssessmentId");

                    b.HasIndex("SkillId");

                    b.ToTable("MentorSkillFeedbacks");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RepoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechUsed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bootcamper"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mentor"
                        });
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Understanding of Key Concepts"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Ability to Apply Concepts in Practice"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "Completion of Assigned Task"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Name = "Code Quality"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Name = "Use of Best Practices"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Name = "Debugging and Troubleshooting"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Name = "Velocity"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Name = "Participation in Discussions"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Name = "Collaboration with Peers"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Name = "Ability to Seek Help or Clarify Doubts"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Name = "Engagement During the Session"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Name = "React"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            Name = "API"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 3,
                            Name = "App Security"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 3,
                            Name = "Database"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 3,
                            Name = "SQL"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 3,
                            Name = "AI"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 3,
                            Name = "Python"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 3,
                            Name = "AWS"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 3,
                            Name = "Azure"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 3,
                            Name = "Manual Testing"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 3,
                            Name = "Automated Testing"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 3,
                            Name = "Coding Design Patterns"
                        });
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("UserId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BatchId = 1,
                            IsDeleted = false,
                            Name = "Frontend Development",
                            UserId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa4")
                        },
                        new
                        {
                            Id = 2,
                            BatchId = 1,
                            IsDeleted = false,
                            Name = "Backend Development",
                            UserId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa4")
                        });
                });

            modelBuilder.Entity("LinkedOutApi.Entities.TopicSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicSkills");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            BatchId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sample__bootcampermentor@gmail.com",
                            GoogleId = "109846284989882836329",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Test_Mentor",
                            Position = "DevOps",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa4"),
                            BatchId = 1,
                            Bio = "My Bio",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sample__bootcamper@gmail.com",
                            GoogleId = "112906756278986482986",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Test_Bootcamper",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("LinkedOutApi.Entities.UserSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.CV", b =>
                {
                    b.HasOne("LinkedOutApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Certification", b =>
                {
                    b.HasOne("LinkedOutApi.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkedOutApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Image", b =>
                {
                    b.HasOne("LinkedOutApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.MentorAssessment", b =>
                {
                    b.HasOne("LinkedOutApi.Entities.User", "Bootcamper")
                        .WithMany()
                        .HasForeignKey("BootcamperId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LinkedOutApi.Entities.User", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LinkedOutApi.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bootcamper");

                    b.Navigation("Mentor");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.MentorSkillFeedback", b =>
                {
                    b.HasOne("LinkedOutApi.Entities.MentorAssessment", "MentorAssessment")
                        .WithMany()
                        .HasForeignKey("MentorAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkedOutApi.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorAssessment");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Project", b =>
                {
                    b.HasOne("LinkedOutApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Skill", b =>
                {
                    b.HasOne("LinkedOutApi.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Topic", b =>
                {
                    b.HasOne("LinkedOutApi.Entities.Batch", "Batch")
                        .WithMany("Topics")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LinkedOutApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.TopicSkill", b =>
                {
                    b.HasOne("LinkedOutApi.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkedOutApi.Entities.Topic", "Topic")
                        .WithMany("TopicSkill")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.User", b =>
                {
                    b.HasOne("LinkedOutApi.Entities.Batch", "Batch")
                        .WithMany("Users")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkedOutApi.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Batch");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.UserSkill", b =>
                {
                    b.HasOne("LinkedOutApi.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinkedOutApi.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Batch", b =>
                {
                    b.Navigation("Topics");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.Topic", b =>
                {
                    b.Navigation("TopicSkill");
                });

            modelBuilder.Entity("LinkedOutApi.Entities.User", b =>
                {
                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
